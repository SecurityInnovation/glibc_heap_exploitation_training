set detach-on-fork off
set follow-fork-mode child

# SigChild pass through

# Stop when getting to exit. Then, attach BACK to the original process we forked from.
break exit 
commands
silent
run-run
echo "Back in the original process\n"
end

# We want the process to work when we go to a new process
break system 
commands
silent
set detach-on-fork on
#set follow-fork-mode parent
continue
end 

python
class BetterRun (gdb.Command):
  '''
  Deal with going between forked server and regular server in a smoother fashion.
  '''

  def __init__ (self):
    super (BetterRun, self).__init__ ("run-run", gdb.COMMAND_USER)

  # Run but attach to process or fork depending on what is going on
  def invoke (self, arg, from_tty):
  
    # To ensure that we will stop the other process and follow fork on the correct one :)
    gdb.execute("set detach-on-fork off")
    gdb.execute("set follow-fork-mode child")

    inferiors = gdb.inferiors()
    print(inferiors) 

    #gdb.execute("info inferiors") # Debugging

    counter = 0 # The amount of 'non-dead' inferiors
    lowest_pid = 2 ** 32 # The lowest PID is the PARENT process of the server. FIND this.
    lowest_num = -1 # The 'inferior' number being used
    for inferior in inferiors:
      if(inferior.pid != 0): # Checks to see if the inferior is alive or not
        counter += 1
      if(inferior.pid < lowest_pid and inferior.pid != 0): # Find the parent inferior
        lowest_pid = inferior.pid
        lowest_num = inferior.num
    
    if(counter == 0): # If NOTHING is on, then keep the 'run' as the same.

        # Do normal 'run' since nothing weird is happening here now. 
        gdb.execute("run")

    # Attach to the original process & kill the child we are on.
    else:

        for inferior in inferiors:
          if(inferior.num != lowest_num):
            # Kill child process
            gdb.execute("kill inferiors " + str(inferior.num))

        # Move BACK to the parent process and continue like nothing happened. 
        gdb.execute("inferior " + str(lowest_num))
        gdb.execute("c")

BetterRun()
BetterRun().dont_repeat()
end

# Overwrite the 'r' alias for 'run' to be THIS version of run
define r
  run-run
end 

define rr 
  run-run 
end 