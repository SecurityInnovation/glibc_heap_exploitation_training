#!/usr/bin/env python3
from pwn import * 
'''
Vulnerability
===================
The 'Connection' header is used to DROP headers within 'interpret_header'.
However, these are NEVER cleared, which results in a use after free
within other uses of 'interpret_header', parse_body and the actual
processing of the headers in 'example.c'.

Eventually, the request information gets cleaned up in 'cleanup_request'. 
At this point, it attempts to clean up the headers in 'req_header_lst'. 
When this happens, it will free the fields of a header and the header itself.
Since we can free the header in 'interpret_header', this leads to an eventual
double free as well. 

The payload below is using the 'Connection' header to free the second 
header 'BBB'. In the next iteration of 'interpret_header', 
it will attempt to use the free chunk from 'BBB' and crash. 

Exploitation Thoughts
========================
There are two potential paths to exploitation: 
- Use after free (UAF) on header
- Double free

With the UAF, we can swap in a FAKE 'struct header'. Since this has a function 
pointer inside of it, this object makes for an amazing target. This is shown 
below: 
```
struct header {
    char* name; // Key of the header (name)
    size_t name_len;
    char* value; // Value of the header
    size_t value_len; 
    void* (*custom_callback)(); 
}; 
```

Our general plan of attack is as follows: 
- Trigger UAF by dropping header in the 'Connection' header.
- Allocate this chunk with user controllable data for a fake 'struct header'.
- Call malicious function pointer with our fake object. 


In this step, try to line up user controlled data into the 'custom_callback()'
Use GDB in order to do this :) Breakpoints on 'interpret_single_header' help.
'''

p = remote("127.0.0.1", 8081) 
p.newline = b"\r\n" # Newlines for the 'sendline'

# Verb, path and protocol
first_line = b"POST /SomeRoute HTTP/1.1"
p.sendline(first_line) 

## Headers
p.sendline(b"Connection:AAA") # Free the 'AAA' header to create a UAF later
p.sendline(b"AAA:BBB") # Send the 'AAA' header

# Line to finish the 'header'
p.sendline(b"")
p.interactive()

