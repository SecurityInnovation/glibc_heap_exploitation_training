#!/usr/bin/env python3
'''
adsfafasfd
'''

from pwn import * 
import os

mode = 'DEBUG' # Turn on gdb
libc_name = '../../../libc_versions/2.23/libc-2.23.so' # For alternate version of libc
env = {}

# Binary setup
elf_name = '.uaf_read-2.23'

elf = ELF(elf_name)
if libc_name != '': 
	libc = ELF(libc_name)
	env = {"LD_PRELOAD": libc.path}
	
# Process creation 
if mode == 'DEBUG': 
	p = gdb.debug(elf.path, env=env, gdbscript='''
dir ../../../libc_versions/2.23/
dir ./
''') 
else: 
	p = process(elf.path, env=env) 

'''
Creates a secret storage location
'''
def create_secret():
	p.sendlineafter(">", "1") 

'''
View A secret

Parameter:
	- index: The index of the secret to print
Returns: 
	- The output from the print
'''
def view_secret(index): 
	p.sendlineafter(">", "4")
	p.sendlineafter(">", str(index))
	p.recvuntil("Your secret:") # Right before secret output

	# Outputted data
	output = p.recvuntil("Welcome").replace("Welcome","") 
	return output

'''
Delete a secret 

Parameter: 
	- index: The index of the secret to remove
'''	
def delete_secret(index): 
	p.sendlineafter(">", "3")
	p.sendlineafter(">", str(index))
	return 

''' 
Set a secret
Parameters: 
	- index: The index of the secret to set
	- secret: The text to be put into the secret
'''
def set_secret(index, secret):
	p.sendlineafter(">", "2") 
	p.sendlineafter(">", str(index))
	p.sendlineafter(">", secret)
	return 

'''
Solve the exercise
Parameters: 
	- value: The secret value guess
'''
def check_value(value):
	p.sendlineafter(">", "5") 
	p.sendlineafter("Value:", value)

p.interactive()


