'''
Grabs a specific version of a file. This is used when doing longer/harder challenges
and you want to upgrade to the next version of the challenge. 

The command works as follows: 
- version_number: 
        - Will grab the specific version you ask for. 
        - final will get the end of the versions
- show: 
        - Will get the AMOUNT of versions available for test. 
		- Shows both the final and steps leading up.
'''

# Validates the file write that is about to occur.
def validate(source, destination): 

	# Check to see if the source path exists for the copy.
	if(not os.path.exists(source)):
		print("Source path {} does not exist".format(source))
		sys.exit(1) 
	
	# If the file already exists, this asks the user if it's okay to overwrite the file
	if(os.path.exists(destination)):
		print("Are you sure? You will override previous copy of version, which includes all modifications")
		answer = input("y/n: ")
		if(answer != "y"):
			print("Exiting: don't want to override your hardwork!")
			sys.exit(1)
		
	print("Copying {} to {}".format(source, os.path.abspath(destination)))

def help_screen():
	help_string = """
grab: Getting the versioned files for a challenge

	- show: Show the amount of stages, start file names and final version names. Example output below: 
		Starters: Different challenge starting locations
		==================================================
		start.py

		Final: The amount of finished challenges to explore
		=====================================================
		final_2.32.py
		final.py
		final_fastbin.py

		There are 4 stages for this challenge
	- start <name>: Copy over the program for a specific starting situation. 
		The 'name' is optional. However, if the challenge has another starting point, there may be an extension 
		that can be used, such as 'fastbin'. If this is the case call the command in the following way: 
		- grab start fastbin		

		To view the possible starting points, run 'grab show' 
	- stage <stage_number>: Copy over the program at a specific stage in the exploitation process. 
		The 'stage_number' is a mandatory field when used here. This helps you keep up if things are
		moving too fast.
		- grab stage 1

		To view the possible stages, run 'grab show'. 

	- final <name>: Copy over the final version of some challenge. 
		The 'name' is optional. However, if the challenge has another solution, there may be an extension 
		that can be used, such as 'fastbin'. If this is the case call the command in the following way: 
		- grab final fastbin

		To view the possible final versions, run 'grab show'. 

	"""

	print(help_string)

import os 
import sys
import shutil
import pathlib 

# TODO: Add better help command
if(len(sys.argv) < 2): 
	print("grab show || stage <version_number> || start <name> || final <name> || help") 
	sys.exit(1) 

# Get current directory 
d = os.getcwd()
d += "/versions"

# Check if this directory exists
if(not os.path.exists(d)):
	print("Go to a challenge location!") 
	sys.exit(1) 

# Challenge information for versioning
start_lst = []
for path in os.listdir(d):
	if(os.path.isfile(os.path.join(d, path)) and "start" in path):
		start_lst.append(path)	

final_lst = [] # The amount of 'final' solutions to the challenge
for path in os.listdir(d):
	if(os.path.isfile(os.path.join(d, path)) and "final" in path):
		final_lst.append(path)

step_lst = [] # The amount of steps for the challenge
for path in os.listdir(d):
	if(os.path.isfile(os.path.join(d, path)) and "stage" in path):
		step_lst.append(path)

# Get the file extension for copying
if(len(final_lst) > 0):
	ext = pathlib.Path(final_lst[0]).suffix
	if(ext == ''):
		print("Invalid version location.")
		
	# Remove the '.' 
	ext = ext[1:]
	if((ext == 'py' or ext == 'c') == False):
		print("Invaild version location")
		exit(0)
else: 
	print("Invaild version location")
	exit(1)
# Shows all of the information about the different stages of the challenge
if(sys.argv[1] == 'show'): 
	print("Starters: Different challenge starting locations")
	print("==================================================")
	for starter in start_lst: 
		print(starter)

	print("")
	print("Final: The amount of finished challenges to explore")
	print("=====================================================")
	for path in final_lst:
		print(path)

	print("")
	print("There are {} stages for this challenge".format(len(step_lst)))

	sys.exit(0)

# If they want the final version
if(sys.argv[1] == 'final'): 

	# If just 'final' then copy over the main final version
	# Otherwise, we will get the OTHER version (such as fastbin or 2.32)
	if(len(sys.argv) >= 3): 
		tmp_path = "/final_{}.{}".format(sys.argv[2], ext)
	else: 
		tmp_path = "/final.{}".format(ext)

	source = "{}{}".format(d, tmp_path) # Where to GET the file from 
	destination = "{}/..{}".format(d, tmp_path)

	# Validate the files then copy
	validate(source, destination)
	shutil.copyfile(source, destination) 
	sys.exit(0) 

# Starting file case 
if(sys.argv[1] == 'start'):
	# If just 'final' then copy over the main final version
	# Otherwise, we will get the OTHER version (such as fastbin or 2.32)
	if(len(sys.argv) >= 3): 
		tmp_path = "/start_{}.{}".format(sys.argv[2], ext)
	else: 
		tmp_path = "/start.{}".format(ext)

	source = "{}{}".format(d, tmp_path) # Where to GET the file from 
	destination = "{}/..{}".format(d, tmp_path)

	# Validate the files then copy
	validate(source, destination)
	shutil.copyfile(source, destination) 
	sys.exit(0) 

# If a stagging request
if(sys.argv[1] == "stage"): 

	# Validate the staging information
	if(len(sys.argv) < 3):
		print("grab stage <version_number>")
	if(sys.argv[2].isnumeric() == False):
		print("Staging # is wrong. Please use a number for the stage.")
	
	version = int(sys.argv[2])
	if(version <= 0 or version > len(step_lst)):
		print("Invalid stage version. ") 
		sys.exit(1) 

	tmp_path = "/stage{}.{}".format(version, ext)
	source = "{}{}".format(d, tmp_path) # Where to GET the file from 
	destination = "{}/..{}".format(d, tmp_path)

	# Validate write
	validate(source, destination)
	shutil.copyfile(source, destination) 
	sys.exit(0) 
if(sys.argv[1] == "help"):
	help_screen()
	exit(0)

help_screen()
