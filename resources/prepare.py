'''
Depending on the course, different content will be given to the 
students of the course. Additionally, this runs the compilation script
for all of the challenges.

Instead of MANUALLY deleting everything this script will simply do it for us. 
What does this actual remove? 
- Unused modules
- Unused demos
- Unused exercises
- .git/ information
- Personal Github information (TODO) 

This is a 'default leave' system. So, anything not explicitly removed
will be staying around in the VM. 
'''

import shutil
import os
import json 

'''
Imports the configuration
'''
def import_configuration():
    with open('config.json') as json_file:
        data = json.load(json_file)
    return data['modules'], data['demos'], data['misc'], data['settings']

# Gets all of the current modules, exercises or demos in a folder
def get_contents(location):
    modules = [os.path.abspath(os.path.join(location, o)).split("/")[-1] for o in os.listdir(location) 
                    if os.path.isdir(os.path.join(location,o))]
    return modules

def delete_content(content):
    if(os.path.isfile(content)):
        os.remove(content)
    else: 
        shutil.rmtree(content) 
    #else: 
        #print("File does not exist")


def handle_modules(modules, config): 
    for module in modules: 
        handle_module(module, config)

def handle_module(module, config): 

    # Only go through if the configuration has it
    index = 0
    for element in config: 
        if(module in element):
            break
        
        index += 1
    if(index == len(config)):
        return 

    # Should just be ALL and delete the whole module
    if(type(config[index][module]) == str and config[index][module] == 'all'):
        # delete
        print("Delete Full Module: " + module)
        delete_content("../modules/" + module)

    elif(type((config[index][module]) == list)):
        # Iterate over the list and delete the individual modules
        
        for exercise in config[index][module]:
            # Delete the module
            print("Delete " + exercise + " of the module " + module)
            delete_content("../modules/" + module + "/" + exercise)
    print()


def handle_demos(demo, config): 
    for demo in demos: 
        handle_demo(demo, config)

def handle_demo(demo, config):
    # Only go through if the configuration has it
    index = 0
    for element in config: 
        if(demo in element):
            break
        
        index += 1
    if(index == len(config)):
        return 

    # Should just be ALL and delete the whole demo
    if(type(config[index][demo]) == str and config[index][demo] == 'all'):
        # delete
        print("Delete Full Demo: " + demo)
        delete_content("../demos/" + demo)

    print()

def handle_misc(config):
    for content in config: 
        print("Delete content " + content)
        delete_content(content)  

# TODO 
def delete_solution_guide(modules): 
     for element in modules: 
         print(element)

def handle_settings(modules, settings):
    # If the 'solutions' option is there
    delete_solution_guide(modules) 

    # If the 'git' option is there
    delete_content("../.git") 

# Get the configuration information
module_config, demo_config, misc_config, settings = import_configuration()
modules = get_contents("../modules")
demos = get_contents("../demos")

handle_misc(misc_config) 
# Handle the modules, demos and other assorted things
handle_modules(modules, module_config)
handle_demos(demos, demo_config) 
handle_settings(modules, settings)
