#!/bin/bash

# This script is used to start a version of an executable with a different vsion of GlibC.
# This works by patching the binary, using LD_PRELOAD and then running the executable. 
# There are two ways to run this: with gdb or without gdb. Add a third parameter in order to use with gdb. Otherwise, it will use the regular execution method. This uses a GDB script to do a few things as well. 

# Do check for the amount of arguments here.
if [ $# -lt 2 ]
then 
    echo "run <binary> <LibC Version> <Put Anything for Gdb>"
    exit 1
fi 

# Also, have an optional gdb switch too

BINARY=$1 # The binary that will be ran.
VERSION=$2 # Version of glibc to run
VERSION_LOCATION="/home/pwn_heap/Desktop/heap_training/libc_versions/$VERSION" 

#TODO: Add sanity checks on binary and LibC version 

# Use for file name. Copy into /tmp directory
EXECUTABLE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
NEW_BINARY="/tmp/$EXECUTABLE" 
cp $BINARY $NEW_BINARY

# Patch the binary to use the proper loader
LOADER="${VERSION_LOCATION}/ld-${VERSION}.so"
patchelf --set-interpreter "${LOADER}" "${NEW_BINARY}"

# Run the actual binary
PRELOAD="${VERSION_LOCATION}/libc-${VERSION}.so" # Preload to run the correct version of LibC.

# Run in GDB if there is a third argument. Otherwise, start in regular terminal.
if [ $# -eq 3 ]
then

   # Create GDBSCRIPT file and add commands for startup
   GDBSCRIPT=/tmp/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
   echo $GDBSCRIPT
   echo set exec-wrapper env "LD_PRELOAD=$PRELOAD" > $GDBSCRIPT
   echo "b main" >> $GDBSCRIPT # Breakpoint on main
   echo "dir $VERSION_LOCATION" >> $GDBSCRIPT # Set path of LibC malloc files
   #echo "dir /home/pwn_heap/Desktop/heap_training/fd_poison/challenge1/" >> $GDBSCRIPT
   echo "r" >> $GDBSCRIPT # Run and pause at main 

   # Run GDB with the nice script that has been added
   gdb -x $GDBSCRIPT $NEW_BINARY
   rm $NEW_BINARY
   rm $GDBSCRIPT
   exit 1
fi

# Run the program with the specific version (without GDB) 
LD_PRELOAD=$PRELOAD $NEW_BINARY
rm $NEW_BINARY

