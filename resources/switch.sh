#!/bin/bash

# This script is used to start a version of an executable with a different vsion of GlibC.
# This works by patching the binary, using LD_PRELOAD and then running the executable.
# There are two ways to run this: with gdb or without gdb. Add a third parameter in order to use with gdb. Otherwise, it will use the regular execution method.


# Do check for the amount of arguments here.
if [ $# -lt 2 ]
then 
    echo "$0 <binary> <LibC Version> <Put Anything for Gdb>"
    exit 1
fi 

# Also, have an optional gdb switch too

VERSION=$2 # Version of glibc to run
BINARY=$1 # The binary that will be ran.
VERSION_LOCATION="/home/strikeout/Desktop/tools/how2heap/glibc_versions" 
NEW_BINARY=".${BINARY}"

cp $BINARY "${NEW_BINARY}" # Copy the binary 

# Patch the binary to use the proper loader
LOADER="${VERSION_LOCATION}/ld-${VERSION}.so"
patchelf --set-interpreter "${LOADER}" "${NEW_BINARY}"

# Run the actual binary
PRELOAD="${VERSION_LOCATION}/libc-${VERSION}.so" # Preload to run the correct version of LibC.

# Run in GDB if there is a third argument. Otherwise, start in regular terminal.
if [ $# -eq 3 ]
then
   # Runs GDB, while preloading the LibC library that we want
   gdb --args env LD_PRELOAD="${PRELOAD}" $NEW_BINARY
   exit 1
fi

# If not the gdb setting, then run the binary normally with the proper version LibC.
LD_PRELOAD=$PRELOAD $NEW_BINARY

